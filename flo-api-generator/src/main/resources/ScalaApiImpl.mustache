package com.spotify.flo.dsl

import com.spotify.flo.EvalContext.Value
import com.spotify.flo.Task
import com.spotify.flo.TaskBuilder
import com.spotify.flo._
import com.spotify.flo.dsl.Util._

import _root_.scala.collection.JavaConversions
import _root_.scala.reflect.ClassTag

private[dsl] class Builder0[Z: ClassTag](val name: String, val args: Any*) extends TaskBuilder0[Z] { self =>

  private val cls = implicitly[ClassTag[Z]].runtimeClass.asInstanceOf[Class[Z]]
  private val builder = Task
      .named(name, args.asInstanceOf[Seq[AnyRef]]:_*)
      .ofType(cls)

  override def process(fn: => Z): Task[Z] =
    builder.process(f0(fn))

  override def context[A1](taskContextGeneric: TaskContextGeneric[A1]): TaskBuilder1[A1, Z, Z] = new Builder1[A1, Z, Z] {
    type J1 = A1
    val c1: J1 => A1 = identity
    val builder = self.builder.context(taskContextGeneric)
  }

  override def output[A1](taskOutput: TaskOutput[A1, Z]): TaskBuilder1[A1, Z, Z] = new Builder1[A1, Z, Z] {
    type J1 = A1
    val c1: J1 => A1 = identity
    val builder = self.builder.output(taskOutput)
  }

  override def operator[A1, Y](taskOperator: TaskOperator[A1, Y, Z]): TaskBuilder1[A1, Y, Z] = new Builder1[A1, Y, Z] {
    type J1 = A1
    val c1: J1 => A1 = identity
    val builder = self.builder.operator(taskOperator)
  }

  override def input[A1](task: => Task[A1]): TaskBuilder1[A1, Z, Z] = new Builder1[A1, Z, Z] {
    type J1 = A1
    val c1: J1 => A1 = identity
    val builder = self.builder.input(fn(task))
  }

  override def inputs[A1](tasks: => List[Task[A1]]) = new Builder1[List[A1], Z, Z] {
    type J1 = java.util.List[A1]
    val c1: J1 => List[A1] = JavaConversions.iterableAsScalaIterable(_).toList
    val builder = self.builder.inputs(javaList(tasks))
  }
}
{{#genBuilder}}

private[dsl] trait Builder{{arity}}[{{typeArgsNumA}}, Y, Z] extends TaskBuilder{{arity}}[{{typeArgsNumA}}, Y, Z] {
  self =>
  {{^iter.isFirst}}

  // previous builder
  val p: Builder{{arityMinus}}[{{typeArgsNumAMinus}},_,Z]
  {{/iter.isFirst}}

  type J{{arity}}
  val c{{arity}}: J{{arity}} => A{{arity}}
  val builder: TaskBuilder.TaskBuilder{{arity}}[{{typeArgsPsJ}}, Y, Z]

  override def process(fn: ({{typeArgsNumA}}) => Y): Task[Z] =
    builder.process(f{{arity}}(
      ({{argumentsNum}}) => fn({{argumentsPsConv}})
    ))
  {{^iter.isLast}}

  override def context[A{{arityPlus}}](taskContextGeneric: TaskContextGeneric[A{{arityPlus}}]): TaskBuilder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] =
    new Builder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] {
      type J{{arityPlus}} = A{{arityPlus}}
      val c{{arityPlus}}: J{{arityPlus}} => A{{arityPlus}} = identity
      val p: self.type = self
      val builder = self.builder.context(taskContextGeneric)
    }

  override def output[A{{arityPlus}}](taskOutput: TaskOutput[A{{arityPlus}}, Z]): TaskBuilder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] =
    new Builder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] {
      type J{{arityPlus}} = A{{arityPlus}}
      val c{{arityPlus}}: J{{arityPlus}} => A{{arityPlus}} = identity
      val p: self.type = self
      val builder = self.builder.output(taskOutput)
    }

  override def operator[A{{arityPlus}}, YN](taskOperator: TaskOperator[A{{arityPlus}}, YN, Z]): TaskBuilder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, YN, Z] =
    new Builder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, YN, Z] {
      type J{{arityPlus}} = A{{arityPlus}}
      val c{{arityPlus}}: J{{arityPlus}} => A{{arityPlus}} = identity
      val p: self.type = self
      val builder = self.builder.operator(taskOperator)
    }

  override def input[A{{arityPlus}}](task: => Task[A{{arityPlus}}]): TaskBuilder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] =
    new Builder{{arityPlus}}[{{typeArgsNumA}}, A{{arityPlus}}, Y, Z] {
      type J{{arityPlus}} = A{{arityPlus}}
      val c{{arityPlus}}: J{{arityPlus}} => A{{arityPlus}} = identity
      val p: self.type = self
      val builder = self.builder.input(fn(task))
    }

  override def inputs[A{{arityPlus}}](tasks: => List[Task[A{{arityPlus}}]]): TaskBuilder{{arityPlus}}[{{typeArgsNumA}}, List[A{{arityPlus}}], Y, Z] =
    new Builder{{arityPlus}}[{{typeArgsNumA}}, List[A{{arityPlus}}], Y, Z] {
      type J{{arityPlus}} = java.util.List[A{{arityPlus}}]
      val c{{arityPlus}}: J{{arityPlus}} => List[A{{arityPlus}}] = JavaConversions.iterableAsScalaIterable(_).toList
      val p: self.type = self
      val builder = self.builder.inputs(javaList(tasks))
    }
  {{/iter.isLast}}
}
{{/genBuilder}}
